<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="//unpkg.com/alpinejs" defer></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #222;
            color: #fff;
        }

        canvas {
            display: block;
            margin: auto;
            background-color: #111;
            border: 2px solid #fff;
        }
    </style>
    <script>
        window.onload = function () {
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var scale = 20;
            var rows = canvas.height / scale;
            var columns = canvas.width / scale;
            var snake;
            var fruit;
            var user_id = Number("{{result.id}}");
            var score = 0;

            (function setup() {
                canvas.width = 600;
                canvas.height = 400;
                document.body.appendChild(canvas);
                snake = new Snake();
                fruit = new Fruit();
                fruit.pickLocation();
                window.setInterval(() => {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    fruit.draw();
                    snake.update();
                    snake.draw();

                    if (snake.eat(fruit)) {
                        fruit.pickLocation();
                        score++;
                    }

                    if (snake.checkCollision()) {
                        snake.reset();
                        //saveScore(score);
                        saveScoreToDatabase(score);
                    }

                    document.querySelector('span').innerText = score;
                }, 250);

            }());

            window.addEventListener('keydown', e => {
                const direction = e.key.replace('Arrow', '');
                snake.changeDirection(direction);
            });

            function saveScore(score_game) {
                console.log("Score saved:", score);
            }





            //chat preporucio kao moguci nacin rjesavanja

            function saveScoreToDatabase(score_game) {
                console.log("start score");

                fetch(`/competitions/score_gameUpdate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ score_game: score })
                })
                    .then(response => {
                        console.log("sent score");
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        console.log('Score saved to database successfully');
                    })
                    .catch(error => {
                        console.log("error score");
                        console.error('There was a problem saving the score:', error.message);
                    });
            }










            if (snake.eat(fruit)) {
                fruit.pickLocation();
                score++;
                updateScoreDisplay(score_game); // Update the score display
                saveScoreToDatabase(score_game); // Save score to the database
            }




            function Snake() {
                this.x = canvas.width / 2;
                this.y = canvas.height / 2;
                this.xSpeed = scale * 1;
                this.ySpeed = 0;
                this.total = 0;
                this.tail = [];

                this.draw = function () {
                    ctx.fillStyle = "#00ff00";
                    for (let i = 0; i < this.tail.length; i++) {
                        ctx.fillRect(this.tail[i].x, this.tail[i].y, scale, scale);
                    }
                    ctx.fillRect(this.x, this.y, scale, scale);
                };

                this.update = function () {
                    for (let i = 0; i < this.tail.length - 1; i++) {
                        this.tail[i] = this.tail[i + 1];
                    }
                    this.tail[this.total - 1] = { x: this.x, y: this.y };

                    this.x += this.xSpeed;
                    this.y += this.ySpeed;

                    if (this.x >= canvas.width || this.y >= canvas.height || this.x < 0 || this.y < 0) {
                        this.reset();
                        //saveScore(score);
                        saveScoreToDatabase(score);
                    }
                };

                this.changeDirection = function (direction) {
                    switch (direction) {
                        case 'Up':
                            if (this.ySpeed !== scale * 1) {
                                this.xSpeed = 0;
                                this.ySpeed = -scale * 1;
                            }
                            break;
                        case 'Down':
                            if (this.ySpeed !== -scale * 1) {
                                this.xSpeed = 0;
                                this.ySpeed = scale * 1;
                            }
                            break;
                        case 'Left':
                            if (this.xSpeed !== scale * 1) {
                                this.xSpeed = -scale * 1;
                                this.ySpeed = 0;
                            }
                            break;
                        case 'Right':
                            if (this.xSpeed !== -scale * 1) {
                                this.xSpeed = scale * 1;
                                this.ySpeed = 0;
                            }
                            break;
                    }
                };

                this.eat = function (fruit) {
                    if (this.x === fruit.x && this.y === fruit.y) {
                        this.total++;
                        return true;
                    }
                    return false;
                };

                this.checkCollision = function () {
                    for (var i = 0; i < this.tail.length; i++) {
                        if (this.x === this.tail[i].x && this.y === this.tail[i].y) {
                            return true;
                        }
                    }
                    return false;
                };

                this.reset = function () {
                    this.x = canvas.width / 2;
                    this.y = canvas.height / 2;
                    this.xSpeed = scale * 1;
                    this.ySpeed = 0;
                    this.total = 0;
                    this.tail = [];
                };
            }

            function Fruit() {
                this.x;
                this.y;

                this.pickLocation = function () {
                    this.x = (Math.floor(Math.random() * columns - 1) + 1) * scale;
                    this.y = (Math.floor(Math.random() * rows - 1) + 1) * scale;
                };

                this.draw = function () {
                    ctx.fillStyle = "#ff0000";
                    ctx.fillRect(this.x, this.y, scale, scale);
                };
            }
        }
    </script>
</head>

<body>
    <span>0</span>
    <p>Score: </p>
</body>

</html>